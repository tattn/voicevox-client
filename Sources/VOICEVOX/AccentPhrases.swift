import Foundation
import voicevox_common

/// Manages accent phrases with RAII-style resource management.
///
/// This class encapsulates the accent phrases JSON representation generated by OpenJTalk
/// and ensures proper memory cleanup when the instance is deallocated.
///
/// The class follows the VOICEVOX synthesis pipeline:
/// 1. Text analysis with OpenJTalk to generate accent phrases
/// 2. Mora data replacement based on voice style
/// 3. Audio query creation for final synthesis
final class AccentPhrases {
  /// The underlying JSON pointer for accent phrases
  private(set) var pointer: UnsafeMutablePointer<CChar>

  /// Initializes accent phrases by analyzing text with OpenJTalk.
  ///
  /// - Parameters:
  ///   - text: The text to analyze (should be in Japanese)
  ///   - openJTalk: An initialized OpenJTalk instance
  ///
  /// - Throws: `VOICEVOXError` if the text analysis fails
  init(text: String, openJTalk: OpenJTalk) throws(VOICEVOXError) {
    var accentPhrasesJson: UnsafeMutablePointer<CChar>?
    let resultCode = voicevox_open_jtalk_rc_analyze(
      openJTalk.pointer,
      text,
      &accentPhrasesJson
    )

    guard resultCode == 0, let accentPhrasesJson else {
      throw .synthesisFailed(
        text: text,
        styleId: nil,
        reason: "Failed to analyze text with OpenJTalk (error code: \(resultCode))"
      )
    }

    self.pointer = accentPhrasesJson
  }

  /// Private initializer for creating AccentPhrases from an existing pointer
  private init(pointer: UnsafeMutablePointer<CChar>) {
    self.pointer = pointer
  }

  /// Replaces mora data based on the specified style.
  ///
  /// This method creates a new AccentPhrases instance with updated mora data.
  /// The original instance remains unchanged.
  ///
  /// - Parameters:
  ///   - styleId: The voice style identifier
  ///   - synthesizer: An initialized CoreSynthesizer instance
  ///   - text: The original text (for error reporting)
  ///
  /// - Returns: A new AccentPhrases instance with updated mora data
  ///
  /// - Throws: `VOICEVOXError` if the mora data replacement fails
  func replacingMoraData(
    styleId: UInt32,
    synthesizer: CoreSynthesizer,
    text: String
  ) throws(VOICEVOXError) -> AccentPhrases {
    var updatedAccentPhrasesJson: UnsafeMutablePointer<CChar>?
    let resultCode = voicevox_synthesizer_replace_mora_data(
      synthesizer.pointer,
      self.pointer,
      VoicevoxStyleId(styleId),
      &updatedAccentPhrasesJson
    )

    guard resultCode == 0, let updatedAccentPhrasesJson else {
      throw .synthesisFailed(
        text: text,
        styleId: styleId,
        reason: "Failed to replace mora data (error code: \(resultCode))"
      )
    }

    return AccentPhrases(pointer: updatedAccentPhrasesJson)
  }

  /// Creates an AudioQuery from the accent phrases.
  ///
  /// - Parameters:
  ///   - text: The original text (for error reporting)
  ///   - styleId: The voice style identifier (for error reporting)
  ///
  /// - Returns: An AudioQuery containing the synthesis parameters
  ///
  /// - Throws: `VOICEVOXError` if the audio query creation fails
  func toAudioQuery(text: String, styleId: UInt32) throws(VOICEVOXError) -> AudioQuery {
    try AudioQuery(
      accentPhrasesJson: pointer,
      text: text,
      styleId: styleId
    )
  }

  /// Gets the JSON string representation of the accent phrases.
  ///
  /// - Returns: The JSON string representation
  func toJSONString() -> String {
    String(cString: pointer)
  }

  deinit {
    voicevox_json_free(pointer)
  }
}
